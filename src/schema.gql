# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddCategoriesToGetProductDTOInput {
  """
  The id of the record.
  """
  id: ID!

  """
  The ids of the relations.
  """
  relationIds: [ID!]!
}

input AddLocationsToRegionInput {
  """
  The id of the record.
  """
  id: ID!

  """
  The ids of the relations.
  """
  relationIds: [ID!]!
}

input AddProductsToUserDTOInput {
  """
  The id of the record.
  """
  id: ID!

  """
  The ids of the relations.
  """
  relationIds: [ID!]!
}

input AddSubcategoriesToCategoryDTOInput {
  """
  The id of the record.
  """
  id: ID!

  """
  The ids of the relations.
  """
  relationIds: [ID!]!
}

input AddSubcategoriesToGetProductDTOInput {
  """
  The id of the record.
  """
  id: ID!

  """
  The ids of the relations.
  """
  relationIds: [ID!]!
}

input AddSubcategoriesToSubcategoriesDTOInput {
  """
  The id of the record.
  """
  id: ID!

  """
  The ids of the relations.
  """
  relationIds: [ID!]!
}

type Category {
  id: String!
  name: String!
  subcategories: [SubcategoriesDTO!]
}

type CategoryDTO {
  id: String!
  name: String!
  subcategories(
    """
    Specify to filter the records returned.
    """
    filter: SubcategoriesDTOFilter! = {}

    """
    Specify to sort results.
    """
    sorting: [SubcategoriesDTOSort!]! = []
  ): [SubcategoriesDTO!]!
}

type CategoryDTOConnection {
  """
  Array of edges.
  """
  edges: [CategoryDTOEdge!]!

  """
  Paging information
  """
  pageInfo: PageInfo!
}

input CategoryDTODeleteFilter {
  and: [CategoryDTODeleteFilter!]
  id: StringFieldComparison
  name: StringFieldComparison
  or: [CategoryDTODeleteFilter!]
}

type CategoryDTODeleteResponse {
  id: String
  name: String
  subcategories: SubcategoriesDTO
}

type CategoryDTOEdge {
  """
  Cursor for this node.
  """
  cursor: ConnectionCursor!

  """
  The node containing the CategoryDTO
  """
  node: CategoryDTO!
}

input CategoryDTOFilter {
  and: [CategoryDTOFilter!]
  id: StringFieldComparison
  name: StringFieldComparison
  or: [CategoryDTOFilter!]
}

input CategoryDTOSort {
  direction: SortDirection!
  field: CategoryDTOSortFields!
  nulls: SortNulls
}

enum CategoryDTOSortFields {
  id
  name
}

input CategoryDTOUpdateFilter {
  and: [CategoryDTOUpdateFilter!]
  id: StringFieldComparison
  name: StringFieldComparison
  or: [CategoryDTOUpdateFilter!]
}

"""
Cursor for paging through collections
"""
scalar ConnectionCursor

input CreateCategoriesInput {
  categories: [CreateCategoryInput!]!
}

type CreateCategoryDTO {
  name: String!
  subcategories: [CreateSubcategoriesDTO!]
}

input CreateCategoryInput {
  name: String!
  subcategories: [CreateSubcategoriesInput!] = []
}

input CreateFieldFromStringDTO {
  label: String!
  stringSchema: String!
}

input CreateLocationInputDTO {
  location: String!
  region: String!
  sector: [String!]!
}

input CreateManyCategoryDTOSInput {
  """
  Array of records to create
  """
  categoryDTOS: [CreateCategoryInput!]!
}

input CreateManyGetProductDTOSInput {
  """
  Array of records to create
  """
  getProductDTOS: [CreateProductInput!]!
}

input CreateManyLocationsInput {
  """
  Array of records to create
  """
  locations: [CreateLocationInputDTO!]!
}

input CreateManyRegionsInput {
  """
  Array of records to create
  """
  regions: [CreateRegion!]!
}

input CreateManySubcategoriesDTOSInput {
  """
  Array of records to create
  """
  subcategoriesDTOS: [CreateSubcategoriesInput!]!
}

input CreateManyUserDTOSInput {
  """
  Array of records to create
  """
  userDTOS: [CreateUserDTO!]!
}

input CreateOneCategoryDTOInput {
  """
  The record to create
  """
  categoryDTO: CreateCategoryInput!
}

input CreateOneGetProductDTOInput {
  """
  The record to create
  """
  getProductDTO: CreateProductInput!
}

input CreateOneLocationInput {
  """
  The record to create
  """
  location: CreateLocationInputDTO!
}

input CreateOneRegionInput {
  """
  The record to create
  """
  region: CreateRegion!
}

input CreateOneSubcategoriesDTOInput {
  """
  The record to create
  """
  subcategoriesDTO: CreateSubcategoriesInput!
}

input CreateOneUserDTOInput {
  """
  The record to create
  """
  userDTO: CreateUserDTO!
}

input CreateProductInput {
  author: String!
  category: String!
  currency: String!
  description: String
  images: [String!]!
  name: String!
  price: Int!
  productDetails: String!
  subcategory: String!
  thumbnail: String!
}

input CreateRegion {
  id: ID!
  region: String
}

type CreateSubcategoriesDTO {
  childSubcategories: [CreateSubcategoriesDTO!]
  name: String!
}

input CreateSubcategoriesInput {
  childSubcategories: [CreateSubcategoriesInput!] = []
  name: String!
}

input CreateUserDTO {
  _id: String!
  access_token: String
  email: String!
  firstName: String!
  lastName: String!
  refresh_token: String
}

input CursorPaging {
  """
  Paginate after opaque cursor
  """
  after: ConnectionCursor

  """
  Paginate before opaque cursor
  """
  before: ConnectionCursor

  """
  Paginate first
  """
  first: Int

  """
  Paginate last
  """
  last: Int
}

input DeleteManyCategoryDTOSInput {
  """
  Filter to find records to delete
  """
  filter: CategoryDTODeleteFilter!
}

input DeleteManyGetProductDTOSInput {
  """
  Filter to find records to delete
  """
  filter: GetProductDTODeleteFilter!
}

input DeleteManyLocationsInput {
  """
  Filter to find records to delete
  """
  filter: LocationDeleteFilter!
}

input DeleteManyRegionsInput {
  """
  Filter to find records to delete
  """
  filter: RegionDeleteFilter!
}

type DeleteManyResponse {
  """
  The number of records deleted.
  """
  deletedCount: Int!
}

input DeleteManySubcategoriesDTOSInput {
  """
  Filter to find records to delete
  """
  filter: SubcategoriesDTODeleteFilter!
}

input DeleteManyUserDTOSInput {
  """
  Filter to find records to delete
  """
  filter: UserDTODeleteFilter!
}

input DeleteOneCategoryDTOInput {
  """
  The id of the record to delete.
  """
  id: ID!
}

input DeleteOneGetProductDTOInput {
  """
  The id of the record to delete.
  """
  id: ID!
}

input DeleteOneLocationInput {
  """
  The id of the record to delete.
  """
  id: ID!
}

input DeleteOneRegionInput {
  """
  The id of the record to delete.
  """
  id: ID!
}

input DeleteOneSubcategoriesDTOInput {
  """
  The id of the record to delete.
  """
  id: ID!
}

input DeleteOneUserDTOInput {
  """
  The id of the record to delete.
  """
  id: ID!
}

type FormField {
  _id: ID!
  label: String!
  options: [String!]!
  type: String!
  validationSchema: String!
}

type GetProductDTO {
  _id: String!
  author: String!
  categories(
    """
    Specify to filter the records returned.
    """
    filter: CategoryDTOFilter! = {}

    """
    Specify to sort results.
    """
    sorting: [CategoryDTOSort!]! = []
  ): [CategoryDTO!]!
  currency: String!
  description: String!
  images: [String!]!
  name: String!
  price: Float!
  productDetails: String!
  subcategories(
    """
    Specify to filter the records returned.
    """
    filter: SubcategoriesDTOFilter! = {}

    """
    Specify to sort results.
    """
    sorting: [SubcategoriesDTOSort!]! = []
  ): [SubcategoriesDTO!]!
  thumbnail: String!
}

type GetProductDTOConnection {
  """
  Array of edges.
  """
  edges: [GetProductDTOEdge!]!

  """
  Paging information
  """
  pageInfo: PageInfo!
}

input GetProductDTODeleteFilter {
  and: [GetProductDTODeleteFilter!]
  name: StringFieldComparison
  or: [GetProductDTODeleteFilter!]
  price: NumberFieldComparison
}

type GetProductDTODeleteResponse {
  _id: String
  author: String
  currency: String
  description: String
  images: [String!]
  name: String
  price: Float
  productDetails: String
  thumbnail: String
}

type GetProductDTOEdge {
  """
  Cursor for this node.
  """
  cursor: ConnectionCursor!

  """
  The node containing the GetProductDTO
  """
  node: GetProductDTO!
}

input GetProductDTOFilter {
  and: [GetProductDTOFilter!]
  name: StringFieldComparison
  or: [GetProductDTOFilter!]
  price: NumberFieldComparison
}

input GetProductDTOSort {
  direction: SortDirection!
  field: GetProductDTOSortFields!
  nulls: SortNulls
}

enum GetProductDTOSortFields {
  name
  price
}

input GetProductDTOUpdateFilter {
  and: [GetProductDTOUpdateFilter!]
  name: StringFieldComparison
  or: [GetProductDTOUpdateFilter!]
  price: NumberFieldComparison
}

input IDFilterComparison {
  eq: ID
  gt: ID
  gte: ID
  iLike: ID
  in: [ID!]
  is: Boolean
  isNot: Boolean
  like: ID
  lt: ID
  lte: ID
  neq: ID
  notILike: ID
  notIn: [ID!]
  notLike: ID
}

type Location {
  id: ID!
  location: String!
  region: Region
  sector: [String!]!
}

type LocationConnection {
  """
  Array of edges.
  """
  edges: [LocationEdge!]!

  """
  Paging information
  """
  pageInfo: PageInfo!
}

input LocationDeleteFilter {
  and: [LocationDeleteFilter!]
  id: IDFilterComparison
  location: StringFieldComparison
  or: [LocationDeleteFilter!]
}

type LocationDeleteResponse {
  id: ID
  location: String
  region: Region
  sector: [String!]
}

type LocationEdge {
  """
  Cursor for this node.
  """
  cursor: ConnectionCursor!

  """
  The node containing the Location
  """
  node: Location!
}

input LocationFilter {
  and: [LocationFilter!]
  id: IDFilterComparison
  location: StringFieldComparison
  or: [LocationFilter!]
}

input LocationInputDTO {
  id: ID!
  location: String!
  region: RegionInputDTO
  sector: [String!]!
}

input LocationSort {
  direction: SortDirection!
  field: LocationSortFields!
  nulls: SortNulls
}

enum LocationSortFields {
  id
  location
}

input LocationUpdateFilter {
  and: [LocationUpdateFilter!]
  id: IDFilterComparison
  location: StringFieldComparison
  or: [LocationUpdateFilter!]
}

type Mutation {
  LogIn(email: String!, password: String!): User!
  Register(input: UserInput!): UserType!
  addCategoriesToGetProductDTO(
    input: AddCategoriesToGetProductDTOInput!
  ): GetProductDTO!
  addLocationsToRegion(input: AddLocationsToRegionInput!): Region!
  addProductsToUserDTO(input: AddProductsToUserDTOInput!): UserDTO!
  addSubcategoriesToCategoryDTO(
    input: AddSubcategoriesToCategoryDTOInput!
  ): CategoryDTO!
  addSubcategoriesToGetProductDTO(
    input: AddSubcategoriesToGetProductDTOInput!
  ): GetProductDTO!
  addSubcategoriesToSubcategoriesDTO(
    input: AddSubcategoriesToSubcategoriesDTOInput!
  ): SubcategoriesDTO!
  createCategoriesWithSubcategories(
    categories: CreateCategoriesInput!
  ): [Category!]!
  createCategoryWithSubcategories(category: CreateCategoryInput!): Category!

  """
  Allows us to create form field with validation from string.
        Example of validationString: string,oneOf['one','two],required,min[0],max[50]
  """
  createFieldFromString(createField: CreateFieldFromStringDTO!): FormField!
  createManyCategoryDTOS(input: CreateManyCategoryDTOSInput!): [CategoryDTO!]!
  createManyGetProductDTOS(
    input: CreateManyGetProductDTOSInput!
  ): [GetProductDTO!]!
  createManyLocations(input: CreateManyLocationsInput!): [Location!]!
  createManyRegions(input: CreateManyRegionsInput!): [Region!]!
  createManySubcategoriesDTOS(
    input: CreateManySubcategoriesDTOSInput!
  ): [SubcategoriesDTO!]!
  createManyUserDTOS(input: CreateManyUserDTOSInput!): [UserDTO!]!
  createOneCategoryDTO(input: CreateOneCategoryDTOInput!): CategoryDTO!
  createOneGetProductDTO(input: CreateOneGetProductDTOInput!): GetProductDTO!
  createOneLocation(input: CreateOneLocationInput!): Location!
  createOneRegion(input: CreateOneRegionInput!): Region!
  createOneSubcategoriesDTO(
    input: CreateOneSubcategoriesDTOInput!
  ): SubcategoriesDTO!
  createOneUserDTO(input: CreateOneUserDTOInput!): UserDTO!
  deleteManyCategoryDTOS(
    input: DeleteManyCategoryDTOSInput!
  ): DeleteManyResponse!
  deleteManyGetProductDTOS(
    input: DeleteManyGetProductDTOSInput!
  ): DeleteManyResponse!
  deleteManyLocations(input: DeleteManyLocationsInput!): DeleteManyResponse!
  deleteManyRegions(input: DeleteManyRegionsInput!): DeleteManyResponse!
  deleteManySubcategoriesDTOS(
    input: DeleteManySubcategoriesDTOSInput!
  ): DeleteManyResponse!
  deleteManyUserDTOS(input: DeleteManyUserDTOSInput!): DeleteManyResponse!
  deleteOneCategoryDTO(
    input: DeleteOneCategoryDTOInput!
  ): CategoryDTODeleteResponse!
  deleteOneGetProductDTO(
    input: DeleteOneGetProductDTOInput!
  ): GetProductDTODeleteResponse!
  deleteOneLocation(input: DeleteOneLocationInput!): LocationDeleteResponse!
  deleteOneRegion(input: DeleteOneRegionInput!): RegionDeleteResponse!
  deleteOneSubcategoriesDTO(
    input: DeleteOneSubcategoriesDTOInput!
  ): SubcategoriesDTODeleteResponse!
  deleteOneUserDTO(input: DeleteOneUserDTOInput!): UserDTODeleteResponse!
  removeAllFields: Boolean!
  removeAllUsers: Boolean!
  setCategoriesOnGetProductDTO(
    input: SetCategoriesOnGetProductDTOInput!
  ): GetProductDTO!
  setLocationsOnRegion(input: SetLocationsOnRegionInput!): Region!
  setProductsOnUserDTO(input: SetProductsOnUserDTOInput!): UserDTO!
  setRegionOnLocation(input: SetRegionOnLocationInput!): Location!
  setSubcategoriesOnCategoryDTO(
    input: SetSubcategoriesOnCategoryDTOInput!
  ): CategoryDTO!
  setSubcategoriesOnGetProductDTO(
    input: SetSubcategoriesOnGetProductDTOInput!
  ): GetProductDTO!
  setSubcategoriesOnSubcategoriesDTO(
    input: SetSubcategoriesOnSubcategoriesDTOInput!
  ): SubcategoriesDTO!
  updateManyCategoryDTOS(
    input: UpdateManyCategoryDTOSInput!
  ): UpdateManyResponse!
  updateManyGetProductDTOS(
    input: UpdateManyGetProductDTOSInput!
  ): UpdateManyResponse!
  updateManyLocations(input: UpdateManyLocationsInput!): UpdateManyResponse!
  updateManyRegions(input: UpdateManyRegionsInput!): UpdateManyResponse!
  updateManySubcategoriesDTOS(
    input: UpdateManySubcategoriesDTOSInput!
  ): UpdateManyResponse!
  updateManyUserDTOS(input: UpdateManyUserDTOSInput!): UpdateManyResponse!
  updateOneCategoryDTO(input: UpdateOneCategoryDTOInput!): CategoryDTO!
  updateOneGetProductDTO(input: UpdateOneGetProductDTOInput!): GetProductDTO!
  updateOneLocation(input: UpdateOneLocationInput!): Location!
  updateOneRegion(input: UpdateOneRegionInput!): Region!
  updateOneSubcategoriesDTO(
    input: UpdateOneSubcategoriesDTOInput!
  ): SubcategoriesDTO!
  updateOneUserDTO(input: UpdateOneUserDTOInput!): UserDTO!
  userCreateProduct(product: CreateProductInput!, userId: String!): UserType!
}

input NumberFieldComparison {
  between: NumberFieldComparisonBetween
  eq: Float
  gt: Float
  gte: Float
  in: [Float!]
  is: Boolean
  isNot: Boolean
  lt: Float
  lte: Float
  neq: Float
  notBetween: NumberFieldComparisonBetween
  notIn: [Float!]
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

type PageInfo {
  """
  The cursor of the last returned record.
  """
  endCursor: ConnectionCursor

  """
  true if paging forward and there are more records.
  """
  hasNextPage: Boolean

  """
  true if paging backwards and there are more records.
  """
  hasPreviousPage: Boolean

  """
  The cursor of the first returned record.
  """
  startCursor: ConnectionCursor
}

type ProductEntity {
  _id: ID!
  author: String!
  category: String!
  currency: String!
  description: String!
  images: [String!]!
  name: String!
  price: Float!
  productDetails: String!
  subcategory: String!
  thumbnail: String!
}

type Query {
  categoryDTO(
    """
    The id of the record to find.
    """
    id: ID!
  ): CategoryDTO!
  categoryDTOS(
    """
    Specify to filter the records returned.
    """
    filter: CategoryDTOFilter! = {}

    """
    Limit or page results.
    """
    paging: CursorPaging! = { first: 10 }

    """
    Specify to sort results.
    """
    sorting: [CategoryDTOSort!]! = []
  ): CategoryDTOConnection!
  findAllFields: [FormField!]!
  getCategories: [Category!]!
  getCategory(categoryName: String!): Category!
  getProductDTO(
    """
    The id of the record to find.
    """
    id: ID!
  ): GetProductDTO!
  getProductDTOS(
    """
    Specify to filter the records returned.
    """
    filter: GetProductDTOFilter! = {}

    """
    Limit or page results.
    """
    paging: CursorPaging! = { first: 10 }

    """
    Specify to sort results.
    """
    sorting: [GetProductDTOSort!]! = []
  ): GetProductDTOConnection!
  location(
    """
    The id of the record to find.
    """
    id: ID!
  ): Location!
  locations(
    """
    Specify to filter the records returned.
    """
    filter: LocationFilter! = {}

    """
    Limit or page results.
    """
    paging: CursorPaging! = { first: 10 }

    """
    Specify to sort results.
    """
    sorting: [LocationSort!]! = []
  ): LocationConnection!
  me: User!
  region(
    """
    The id of the record to find.
    """
    id: ID!
  ): Region!
  regions(
    """
    Specify to filter the records returned.
    """
    filter: RegionFilter! = {}

    """
    Limit or page results.
    """
    paging: CursorPaging! = { first: 10 }

    """
    Specify to sort results.
    """
    sorting: [RegionSort!]! = []
  ): RegionConnection!
  subcategoriesDTO(
    """
    The id of the record to find.
    """
    id: ID!
  ): SubcategoriesDTO!
  subcategoriesDTOS(
    """
    Specify to filter the records returned.
    """
    filter: SubcategoriesDTOFilter! = {}

    """
    Limit or page results.
    """
    paging: CursorPaging! = { first: 10 }

    """
    Specify to sort results.
    """
    sorting: [SubcategoriesDTOSort!]! = []
  ): SubcategoriesDTOConnection!
  userDTO(
    """
    The id of the record to find.
    """
    id: ID!
  ): UserDTO!
  userDTOS(
    """
    Specify to filter the records returned.
    """
    filter: UserDTOFilter! = {}

    """
    Limit or page results.
    """
    paging: CursorPaging! = { first: 10 }

    """
    Specify to sort results.
    """
    sorting: [UserDTOSort!]! = []
  ): UserDTOConnection!
  users: [UserType!]!
}

type Region {
  id: ID!
  locations(
    """
    Specify to filter the records returned.
    """
    filter: LocationFilter! = {}

    """
    Specify to sort results.
    """
    sorting: [LocationSort!]! = []
  ): [Location!]
  region: String
}

type RegionConnection {
  """
  Array of edges.
  """
  edges: [RegionEdge!]!

  """
  Paging information
  """
  pageInfo: PageInfo!
}

input RegionDeleteFilter {
  and: [RegionDeleteFilter!]
  id: IDFilterComparison
  or: [RegionDeleteFilter!]
  region: StringFieldComparison
}

type RegionDeleteResponse {
  id: ID
  region: String
}

type RegionEdge {
  """
  Cursor for this node.
  """
  cursor: ConnectionCursor!

  """
  The node containing the Region
  """
  node: Region!
}

input RegionFilter {
  and: [RegionFilter!]
  id: IDFilterComparison
  or: [RegionFilter!]
  region: StringFieldComparison
}

input RegionInputDTO {
  id: ID!
  locations: [LocationInputDTO!]
  region: String
}

input RegionSort {
  direction: SortDirection!
  field: RegionSortFields!
  nulls: SortNulls
}

enum RegionSortFields {
  id
  region
}

input RegionUpdateFilter {
  and: [RegionUpdateFilter!]
  id: IDFilterComparison
  or: [RegionUpdateFilter!]
  region: StringFieldComparison
}

input SetCategoriesOnGetProductDTOInput {
  """
  The id of the record.
  """
  id: ID!

  """
  The ids of the relations.
  """
  relationIds: [ID!]!
}

input SetLocationsOnRegionInput {
  """
  The id of the record.
  """
  id: ID!

  """
  The ids of the relations.
  """
  relationIds: [ID!]!
}

input SetProductsOnUserDTOInput {
  """
  The id of the record.
  """
  id: ID!

  """
  The ids of the relations.
  """
  relationIds: [ID!]!
}

input SetRegionOnLocationInput {
  """
  The id of the record.
  """
  id: ID!

  """
  The id of relation.
  """
  relationId: ID!
}

input SetSubcategoriesOnCategoryDTOInput {
  """
  The id of the record.
  """
  id: ID!

  """
  The ids of the relations.
  """
  relationIds: [ID!]!
}

input SetSubcategoriesOnGetProductDTOInput {
  """
  The id of the record.
  """
  id: ID!

  """
  The ids of the relations.
  """
  relationIds: [ID!]!
}

input SetSubcategoriesOnSubcategoriesDTOInput {
  """
  The id of the record.
  """
  id: ID!

  """
  The ids of the relations.
  """
  relationIds: [ID!]!
}

"""
Sort Directions
"""
enum SortDirection {
  ASC
  DESC
}

"""
Sort Nulls Options
"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

type SubcategoriesDTO {
  childSubcategories: [SubcategoriesDTO!]
  id: String!
  name: String
  subcategories(
    """
    Specify to filter the records returned.
    """
    filter: SubcategoriesDTOFilter! = {}

    """
    Specify to sort results.
    """
    sorting: [SubcategoriesDTOSort!]! = []
  ): [SubcategoriesDTO!]!
}

type SubcategoriesDTOConnection {
  """
  Array of edges.
  """
  edges: [SubcategoriesDTOEdge!]!

  """
  Paging information
  """
  pageInfo: PageInfo!
}

input SubcategoriesDTODeleteFilter {
  and: [SubcategoriesDTODeleteFilter!]
  id: StringFieldComparison
  name: StringFieldComparison
  or: [SubcategoriesDTODeleteFilter!]
}

type SubcategoriesDTODeleteResponse {
  childSubcategories: [SubcategoriesDTO!]
  id: String
  name: String
}

type SubcategoriesDTOEdge {
  """
  Cursor for this node.
  """
  cursor: ConnectionCursor!

  """
  The node containing the SubcategoriesDTO
  """
  node: SubcategoriesDTO!
}

input SubcategoriesDTOFilter {
  and: [SubcategoriesDTOFilter!]
  id: StringFieldComparison
  name: StringFieldComparison
  or: [SubcategoriesDTOFilter!]
}

input SubcategoriesDTOSort {
  direction: SortDirection!
  field: SubcategoriesDTOSortFields!
  nulls: SortNulls
}

enum SubcategoriesDTOSortFields {
  id
  name
}

input SubcategoriesDTOUpdateFilter {
  and: [SubcategoriesDTOUpdateFilter!]
  id: StringFieldComparison
  name: StringFieldComparison
  or: [SubcategoriesDTOUpdateFilter!]
}

input SubcategoriesInputDTO {
  childSubcategories: [SubcategoriesInputDTO!] = []
  id: String!
  name: String
  subcategories: [SubcategoriesInputDTO!]!
}

type Subcategory {
  childSubcategories: [Subcategory!]
  name: String!
}

input UpdateCategoryDTO {
  id: String
  name: String
  subcategories: SubcategoriesInputDTO
}

input UpdateGetProductDTO {
  _id: String
  author: String
  currency: String
  description: String
  images: [String!]
  name: String
  price: Float
  productDetails: String
  thumbnail: String
}

input UpdateLocation {
  id: ID
  location: String
  region: RegionInputDTO
  sector: [String!]
}

input UpdateManyCategoryDTOSInput {
  """
  Filter used to find fields to update
  """
  filter: CategoryDTOUpdateFilter!

  """
  The update to apply to all records found using the filter
  """
  update: UpdateCategoryDTO!
}

input UpdateManyGetProductDTOSInput {
  """
  Filter used to find fields to update
  """
  filter: GetProductDTOUpdateFilter!

  """
  The update to apply to all records found using the filter
  """
  update: UpdateGetProductDTO!
}

input UpdateManyLocationsInput {
  """
  Filter used to find fields to update
  """
  filter: LocationUpdateFilter!

  """
  The update to apply to all records found using the filter
  """
  update: UpdateLocation!
}

input UpdateManyRegionsInput {
  """
  Filter used to find fields to update
  """
  filter: RegionUpdateFilter!

  """
  The update to apply to all records found using the filter
  """
  update: UpdateRegion!
}

type UpdateManyResponse {
  """
  The number of records updated.
  """
  updatedCount: Int!
}

input UpdateManySubcategoriesDTOSInput {
  """
  Filter used to find fields to update
  """
  filter: SubcategoriesDTOUpdateFilter!

  """
  The update to apply to all records found using the filter
  """
  update: UpdateSubcategoriesDTO!
}

input UpdateManyUserDTOSInput {
  """
  Filter used to find fields to update
  """
  filter: UserDTOUpdateFilter!

  """
  The update to apply to all records found using the filter
  """
  update: UpdateUserDTO!
}

input UpdateOneCategoryDTOInput {
  """
  The id of the record to update
  """
  id: ID!

  """
  The update to apply.
  """
  update: UpdateCategoryDTO!
}

input UpdateOneGetProductDTOInput {
  """
  The id of the record to update
  """
  id: ID!

  """
  The update to apply.
  """
  update: UpdateGetProductDTO!
}

input UpdateOneLocationInput {
  """
  The id of the record to update
  """
  id: ID!

  """
  The update to apply.
  """
  update: UpdateLocation!
}

input UpdateOneRegionInput {
  """
  The id of the record to update
  """
  id: ID!

  """
  The update to apply.
  """
  update: UpdateRegion!
}

input UpdateOneSubcategoriesDTOInput {
  """
  The id of the record to update
  """
  id: ID!

  """
  The update to apply.
  """
  update: UpdateSubcategoriesDTO!
}

input UpdateOneUserDTOInput {
  """
  The id of the record to update
  """
  id: ID!

  """
  The update to apply.
  """
  update: UpdateUserDTO!
}

input UpdateRegion {
  id: ID
  region: String
}

input UpdateSubcategoriesDTO {
  childSubcategories: [SubcategoriesInputDTO!] = []
  id: String
  name: String
}

input UpdateUserDTO {
  _id: String
  access_token: String
  email: String
  firstName: String
  lastName: String
  refresh_token: String
}

type User {
  _id: String!
  access_token: String
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  products: [ProductEntity!]!
  refresh_token: String
}

type UserDTO {
  _id: String!
  access_token: String
  email: String!
  firstName: String!
  lastName: String!
  products(
    """
    Specify to filter the records returned.
    """
    filter: GetProductDTOFilter! = {}

    """
    Specify to sort results.
    """
    sorting: [GetProductDTOSort!]! = []
  ): [GetProductDTO!]!
  refresh_token: String
}

type UserDTOConnection {
  """
  Array of edges.
  """
  edges: [UserDTOEdge!]!

  """
  Paging information
  """
  pageInfo: PageInfo!
}

input UserDTODeleteFilter {
  and: [UserDTODeleteFilter!]
  email: StringFieldComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  or: [UserDTODeleteFilter!]
}

type UserDTODeleteResponse {
  _id: String
  access_token: String
  email: String
  firstName: String
  lastName: String
  refresh_token: String
}

type UserDTOEdge {
  """
  Cursor for this node.
  """
  cursor: ConnectionCursor!

  """
  The node containing the UserDTO
  """
  node: UserDTO!
}

input UserDTOFilter {
  and: [UserDTOFilter!]
  email: StringFieldComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  or: [UserDTOFilter!]
}

input UserDTOSort {
  direction: SortDirection!
  field: UserDTOSortFields!
  nulls: SortNulls
}

enum UserDTOSortFields {
  email
  firstName
  lastName
}

input UserDTOUpdateFilter {
  and: [UserDTOUpdateFilter!]
  email: StringFieldComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  or: [UserDTOUpdateFilter!]
}

input UserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

type UserType {
  _id: ID!
  email: String!
  firstName: String!
  lastName: String!
  products: [ProductEntity!]!
}
