# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type BrandModels {
  _id: ID!
  brand: String!
  models: [String!]!
  subcategoryName: String!
}

type Category {
  id: String!
  name: String!
  subcategories: [Subcategory!]
}

input CreateCategoriesInput {
  categoriesToAdd: [String!]!
}

input CreateFieldFromStringDTO {
  label: String!
  options: [String!]!
  type: String!
  validationString: String!
}

input CreateProductInput {
  author: String!
  category: String!
  currency: String!
  description: String
  images: [String!]!
  name: String!
  price: Int!
  productDetails: String!
  subcategory: String!
  thumbnail: String!
}

input CreateSubcategoriesInput {
  name: String!
  parentCategory: String!
  subcategories: [CreateSubcategoriesInput!]
}

input CreateSubcategoryInput {
  categoryId: String!
  name: String!
}

type FieldGroups {
  _id: String!
  canBeToggled: Boolean!
  fields: [FormField!]
  name: String!
}

type FormField {
  _id: ID!
  label: String!
  options: [String!]!
  type: String!
  validationString: String!
}

input GetFieldGroupDTO {
  id: String!
}

type Locations {
  _id: ID!
  location: String!
  region: String!
  sector: [String!]!
}

type Mutation {
  LogIn(email: String!, password: String!): User!
  Register(input: UserInput!): UserType!
  createCategories(createCategoriesInput: CreateCategoriesInput!): [Category!]!

  """
  Allows us to create form field with validation from string.
        Example of validationString: string,oneOf['one','two],required,min[0],max[50]
  """
  createFieldFromString(createField: CreateFieldFromStringDTO!): FormField!
  createFormGroup: FieldGroups!
  createFormGroups: [FieldGroups!]!
  createProduct(createProductInput: CreateProductInput!): Product!
  createRegionWithLocations: Regions!
  createRegionsWithLocations: [Regions!]!
  createSubcategories(input: CreateSubcategoriesInput!): Subcategory!
  createSubcategory(
    createSubcategoryInput: CreateSubcategoryInput!
  ): Subcategory!
  removeAllBrandModels: Boolean!
  removeAllCategories: Boolean!
  removeAllFieldGroups: Boolean!
  removeAllFields: Boolean!
  removeAllProducts: Product!
  removeAllRegions: Boolean!
  removeAllSubcategories: Boolean!
  removeAllUsers: Boolean!
  removeProduct(id: Int!): Product!
  removeSubcategory(id: Int!): Subcategory!
  updateProduct(updateProductInput: UpdateProductInput!): Product!
  updateSubcategory(
    updateSubcategoryInput: UpdateSubcategoryInput!
  ): Subcategory!
  userCreateProduct(product: CreateProductInput!, userId: String!): UserType!
}

type Product {
  _id: String!
  author: String!
  category: String!
  currency: String!
  description: String!
  images: [String!]!
  name: String!
  price: Float!
  productDetails: String!
  subcategory: String!
  thumbnail: String!
}

type Query {
  categories: [Category!]!
  findAllBrandModels: [BrandModels!]!
  findAllFields: [FormField!]!
  findRegion: Regions!
  findRegions: [Regions!]!
  getAllFieldGroups: [FieldGroups!]!
  getFieldGroup(id: GetFieldGroupDTO!): FieldGroups!
  me: User!
  product(id: Int!): Product!
  products: [Product!]!
  subcategories: [Subcategory!]!
  subcategory(id: Int!): Subcategory!
  users: [UserType!]!
}

type Regions {
  _id: ID!
  locations: [Locations!]!
  region: String!
}

type Subcategory {
  _id: String!
  childCategories: [Subcategory!]!
  name: String
  parentCategory: String!
}

input UpdateProductInput {
  author: String
  category: String
  currency: String
  description: String
  id: String!
  images: [String!]
  name: String
  price: Int
  productDetails: String
  subcategory: String
  thumbnail: String
}

input UpdateSubcategoryInput {
  categoryId: String
  id: Int!
  name: String
}

type User {
  _id: String!
  access_token: String
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  products: [Product!]!
  refresh_token: String
}

input UserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

type UserType {
  _id: ID!
  email: String!
  firstName: String!
  lastName: String!
  products: [Product!]!
}
